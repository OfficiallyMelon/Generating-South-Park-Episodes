import os
import requests
import time
import logging
from tqdm import tqdm

# Define constants
HUGGINGFACE_API_URL = "https://huggingface.co/api/models/openai-community/gpt2/tree/main"
MODEL_SAVE_PATH = "./gpt2"

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def ensure_directory_exists(path):
    if path and not os.path.exists(path):
        os.makedirs(path)

def download_file(file_url, filename):
    if os.path.exists(filename):
        logging.info(f"üü¢ File already exists, skipping: {filename}")
        return True
    
    max_retry = 20
    for attempt in range(max_retry):
        try:
            response = requests.get(file_url, stream=True)
            response.raise_for_status()  # Will raise an HTTPError for bad responses
            ensure_directory_exists(os.path.dirname(filename))  # Ensure directory exists
            total_size = int(response.headers.get('content-length', 0))
            with open(filename, 'wb') as f, tqdm(
                desc=filename,
                total=total_size,
                unit='B',
                unit_scale=True,
                unit_divisor=1024,
                miniters=1,
                colour='green'
            ) as bar:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        bar.update(len(chunk))
            logging.info(f"‚úÖ Download Completed [{filename}]")
            return True
        except requests.exceptions.RequestException as e:
            logging.warning(f"‚ö†Ô∏è Download failed: {e}. Retrying... ({max_retry - attempt - 1} retries left)")
            time.sleep(2 ** attempt)  # Exponential backoff
    logging.error(f"[ERROR] Download failed: {file_url}")
    return False

def download_model_files(api_url, current_path=""):
    response = requests.get(api_url)
    if response.status_code != 200:
        logging.error(f"[ERROR] Failed to access API: {api_url}")
        return

    model_data = response.json()
    for item in model_data:
        file_type = item.get("type")
        file_path = item.get("path")
        full_path = os.path.join(current_path, file_path)
        
        if file_type == "directory":
            ensure_directory_exists(full_path)
            download_model_files(f"{api_url}/{file_path}", full_path)
        elif file_type == "file":
            file_url = f"https://huggingface.co/openai-community/gpt2/resolve/main/{file_path}"
            download_file(file_url, full_path)

def main():
    logging.info(f"ü§ó Starting download Huggingface model from url: {HUGGINGFACE_API_URL}")
    ensure_directory_exists(MODEL_SAVE_PATH)
    download_model_files(HUGGINGFACE_API_URL, MODEL_SAVE_PATH)

if __name__ == "__main__":
    main()
